// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/interpret.proto

package interpret

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/micro/v3/service/api"
	client "github.com/micro/micro/v3/service/client"
	server "github.com/micro/micro/v3/service/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Interpret service

func NewInterpretEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Interpret service

type InterpretService interface {
	InterpretFunction(ctx context.Context, in *InterpretFunctionRequest, opts ...client.CallOption) (*InterpretFunctionResponse, error)
	InterpretLog(ctx context.Context, in *InterpretLogRequest, opts ...client.CallOption) (*InterpretLogResponse, error)
}

type interpretService struct {
	c    client.Client
	name string
}

func NewInterpretService(name string, c client.Client) InterpretService {
	return &interpretService{
		c:    c,
		name: name,
	}
}

func (c *interpretService) InterpretFunction(ctx context.Context, in *InterpretFunctionRequest, opts ...client.CallOption) (*InterpretFunctionResponse, error) {
	req := c.c.NewRequest(c.name, "Interpret.InterpretFunction", in)
	out := new(InterpretFunctionResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *interpretService) InterpretLog(ctx context.Context, in *InterpretLogRequest, opts ...client.CallOption) (*InterpretLogResponse, error) {
	req := c.c.NewRequest(c.name, "Interpret.InterpretLog", in)
	out := new(InterpretLogResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Interpret service

type InterpretHandler interface {
	InterpretFunction(context.Context, *InterpretFunctionRequest, *InterpretFunctionResponse) error
	InterpretLog(context.Context, *InterpretLogRequest, *InterpretLogResponse) error
}

func RegisterInterpretHandler(s server.Server, hdlr InterpretHandler, opts ...server.HandlerOption) error {
	type interpret interface {
		InterpretFunction(ctx context.Context, in *InterpretFunctionRequest, out *InterpretFunctionResponse) error
		InterpretLog(ctx context.Context, in *InterpretLogRequest, out *InterpretLogResponse) error
	}
	type Interpret struct {
		interpret
	}
	h := &interpretHandler{hdlr}
	return s.Handle(s.NewHandler(&Interpret{h}, opts...))
}

type interpretHandler struct {
	InterpretHandler
}

func (h *interpretHandler) InterpretFunction(ctx context.Context, in *InterpretFunctionRequest, out *InterpretFunctionResponse) error {
	return h.InterpretHandler.InterpretFunction(ctx, in, out)
}

func (h *interpretHandler) InterpretLog(ctx context.Context, in *InterpretLogRequest, out *InterpretLogResponse) error {
	return h.InterpretHandler.InterpretLog(ctx, in, out)
}
